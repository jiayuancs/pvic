"""
python -m myutils.gen_sentence
"""
from myutils.hicodet_baseinfo import HICO_DET_HOI_DICT, HICO_DET_OBJECT_DICT, HICO_DET_VERB_DICT
from myutils.dictionary import OBJECT_ARTICLE_DICT, VERBING_DICT

def _get_verbing(verb):
    """获取动词的ing形式"""
    if verb not in VERBING_DICT.keys():
        print("ERROR key: " + verb)
        raise NotImplementedError
    return VERBING_DICT[verb]

def _get_a_or_an_noun(noun):
    """获取名词的带冠词形式"""
    if noun not in OBJECT_ARTICLE_DICT.keys():
        print("ERROR key: " + noun)
        raise NotImplementedError
    return OBJECT_ARTICLE_DICT[noun]


def _get_hoi_text(action_text, object_text):
    action_text = action_text.replace("_", " ")
    object_text = object_text.replace("_", " ")

    # 获取动词和名词对应的形式
    verbing_text = _get_verbing(action_text)
    a_or_an_object_text = _get_a_or_an_noun(object_text)

    # 当前
    no_interaction_flag = "interaction" in action_text and "no" in action_text
    if no_interaction_flag:
        normal_text = f"A photo of a person is not interacting with {a_or_an_object_text}."
        not_text = f"A photo of a person is interacting with {a_or_an_object_text}."
    else:
        normal_text = f"A photo of a person is {verbing_text} {a_or_an_object_text}."
        not_text = f"A photo of a person is not {verbing_text} {a_or_an_object_text}."

    return normal_text, not_text


def gen_only_verb(object_name):
    all_verb_text_dict = {}
    for verb_id, verb_text in HICO_DET_VERB_DICT.items():
        normal_text, not_text = _get_hoi_text(verb_text, object_name)  
        value = {
            "normal": normal_text,
            "not": not_text
        }
        all_verb_text_dict[verb_text] = value
    return all_verb_text_dict

def gen_both_verb_and_object():
    all_hoi_text_dict = {}
    for hoi_name in tqdm(HICO_DET_HOI_DICT.values()):
        assert len(hoi_name.split(" ")) == 2
        action_text, object_text = hoi_name.split(" ")
        normal_text, not_text = _get_hoi_text(action_text, object_text)

        key = f"{action_text}+{object_text}"
        value = {
            "normal": normal_text,
            "not": not_text
        }
        all_hoi_text_dict[key] = value
    return all_hoi_text_dict


def convert_dict_to_str(data: dict, var_name: str):
    write_text = var_name + " = "
    write_text += json.dumps(data, indent=4)
    write_text += "\n"
    return write_text


def get_verb_setence(object_name):
    normal_text_list = []
    not_text_list = []
    for verb_id, verb_text in HICO_DET_VERB_DICT.items():
        normal_text, not_text = _get_hoi_text(verb_text, object_name)  
        normal_text_list.append(normal_text)
        not_text_list.append(not_text)
    return normal_text_list, not_text_list


if __name__ == "__main__":
    import json
    from tqdm import tqdm

    hoi_sentence = gen_both_verb_and_object()
    verb_sentence = gen_only_verb(object_name="object")


    write_text_list = [
        f"# generated by {__file__}",
        convert_dict_to_str(hoi_sentence, "HICO_DET_HOI_SENTENCE_DICT"),
        convert_dict_to_str(verb_sentence, "HICO_DET_VERB_SENTENCE_DICT")
    ]
    write_text = "\n".join(write_text_list)
    with open("myutils/hicodet_sentence.py", "w") as f:
        f.write(write_text)
    print("Done")
